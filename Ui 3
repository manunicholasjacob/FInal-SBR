import tkinter as tk
from tkinter import messagebox, simpledialog
from tkinter import ttk
import sbr

class SlotTestingTool(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("PCIe Slot Testing Tool")
        self.geometry("600x500")
        self.create_widgets()

    def create_widgets(self):
        # Password Entry
        tk.Label(self, text="Enter your password (sudo access):").grid(row=0, column=0, padx=10, pady=10, sticky="e")
        self.password_entry = tk.Entry(self, show="*")
        self.password_entry.grid(row=0, column=1, padx=10, pady=10)

        # Number of Loops
        tk.Label(self, text="Number of Loops:").grid(row=1, column=0, padx=10, pady=10, sticky="e")
        self.loops_entry = tk.Entry(self)
        self.loops_entry.grid(row=1, column=1, padx=10, pady=10)

        # Kill on error option
        tk.Label(self, text="Kill on error:").grid(row=2, column=0, padx=10, pady=10, sticky="e")
        self.kill_var = tk.StringVar(value="n")
        kill_frame = tk.Frame(self)
        kill_frame.grid(row=2, column=1, padx=10, pady=10)
        tk.Radiobutton(kill_frame, text="Yes", variable=self.kill_var, value="y").pack(side=tk.LEFT)
        tk.Radiobutton(kill_frame, text="No", variable=self.kill_var, value="n").pack(side=tk.LEFT)

        # Slot selection
        tk.Label(self, text="Select slots to test:").grid(row=3, column=0, padx=10, pady=10, sticky="e")
        self.slots_listbox = tk.Listbox(self, selectmode=tk.MULTIPLE)
        self.populate_slots()
        self.slots_listbox.grid(row=3, column=1, padx=10, pady=10)

        # Run button
        tk.Button(self, text="Run Test", command=self.run_backend).grid(row=4, columnspan=2, padx=10, pady=10)

        # Output display
        tk.Label(self, text="Output:").grid(row=5, column=0, padx=10, pady=10, sticky="e")
        self.output_text = tk.Text(self, height=10, width=50)
        self.output_text.grid(row=5, column=1, padx=10, pady=10)

    def populate_slots(self):
        slot_numbers = sbr.get_slot_numbers()
        for slot in slot_numbers:
            self.slots_listbox.insert(tk.END, slot)

    def run_backend(self):
        user_password = self.password_entry.get()
        inputnum_loops = int(self.loops_entry.get())
        kill = self.kill_var.get()
        selected_slots = [self.slots_listbox.get(i) for i in self.slots_listbox.curselection()]

        if not user_password or not inputnum_loops or not selected_slots:
            messagebox.showwarning("Input Error", "Please fill in all fields and select at least one slot.")
            return

        selected_slot_numbers = [int(slot.split()[0]) for slot in selected_slots]
        output_lines = sbr.run_test(user_password, inputnum_loops, kill, selected_slot_numbers)
        self.display_output(output_lines)

    def display_output(self, output_lines):
        self.output_text.delete(1.0, tk.END)
        for line in output_lines:
            self.output_text.insert(tk.END, line + "\n")

if __name__ == "__main__":
    app = SlotTestingTool()
    app.mainloop()
